{
  "name": "node-hash",
  "preferGlobal": false,
  "private": false,
  "main": "./lib/Hash",
  "author": {
    "name": "Fabrizio Moscon",
    "email": "mosconfabrizio@gmail.com"
  },
  "version": "1.1.1",
  "description": "Hash data structure",
  "keywords": [
    "hash",
    "typed object",
    "list",
    "key value",
    "key value structure",
    "object hash",
    "collection hash"
  ],
  "bugs": {
    "url": "https://github.com/fabriziomoscon/node-hash/issues"
  },
  "license": "MIT",
  "scripts": {
    "prepublish": "coffee -o lib/ -c src",
    "test": "mocha test"
  },
  "dependencies": {
    "check-types": "1.1.x"
  },
  "devDependencies": {
    "coffee-script": "1.6.x",
    "mocha": "1.14.x",
    "should": "2.0.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/fabriziomoscon/node-hash.git"
  },
  "readme": "# node-hash\n\nA JavaScript implementation of `Hash` data structure. As far as this module is concerned, a `Hash` is a key-value pair list of items of the same type. It supports all primitive JavaScript types and arbitrary Objects.\n\nUse `node-hash` when you have a list of items of the same type stored by key, and you don't want to check types in you application code. You need to provide your own `comparator` function and `node-hash` will `throw` when it fails. Generic comparator function for all JavaScript primitive types are exported as object on `Hash.comparator`.\n\nThis implementation doesn't try to substitute the ES6 `map` implementation, it just represents a lightweight alternative implementation.\n\n**Current Version:** *1.1.0*  \n**Build Status:** [![Build Status](https://travis-ci.org/fabriziomoscon/node-hash.png?branch=master)](https://travis-ci.org/fabriziomoscon/node-hash)  \n**Node Support:** *0.8*, *0.10*, *0.11*  \n\n## Install\n\n```bash\nnpm install node-hash\n```\n\n## Usage\n\nKeys must be defined at construct time, as the library uses `Object.defineProperty` to define getter and setter correctly. The constructor take a comparator function used to check the value inserted into the Hash. You might also set an initial value to all keys passing the third parameter.\n\n### Hash of `Date`\n\n```JavaScript\nvar Hash = require( 'node-hash' );\n\nvar times = new Hash(\n  ['created_at', 'last_seen', 'last_modified', 'future_action_at'],\n  Hash.comparator.Date,\n  new Date()\n);\n\n// uses a predefined setter which will use the `comparator` function to check the value type\ntimes.created_at = new Date();\ntimes.last_seen = new Date();\ntimes.last_modified = new Date();\n\n// these will all throw\ntimes.last_seen = 'yesterday'\ntimes.last_seen = 100\ntimes.last_seen = []\n\n// uses a predefined getter\nconsole.log( times.created_at );\n\n// returns the internal key-value store\nconsole.log( times.getData() );\n\n// returns all the keys passed to the contructor\nassert( times.keys(), ['created_at', 'last_seen', 'last_modified', 'future_action_at'] );\n\n// returns the value of the removed key, or false if the key is not used\ntimes.remove( 'last_modified' );\n\n// returns the number of keys\nassert( times.length, 4 );\n\n// resets the hash\ntimes.reset();\n\n```\n\n### Hash of `number`\n\n```JavaScript\nvar Hash = require( 'node-hash' );\n\nvar dailyStats = new Hash(\n  ['min', 'max', 'avg', 'samples'],\n  Hash.comparator.number\n);\n\ndailyStats.min = 0;\ndailyStats.min = 10;\ndailyStats.samples = 1000;\ndailyStats.avg = 4.3445345;\n```\n\n## marshall\n\nA member function that converts a `node-hash` into a plain Javascript object ready to be serialized. A custom `marhall` function can be passed as argument.\n\n```JavaScript\nvar hash = new Hash(\n  ['key1', 'key2', 'key3'],\n  Hash.comparator.Date\n);\nhash.key1 = new Date();\n\n// {key1: new Date()}\nhash.marshall();\n\n// {key1: timestamp}\nhash.marshall( function (date) {\n  return date.getTime();\n});\n```\n\n## unmarshall\n\nA static non-member function that converts a plain Javascript object into a `node-hash` using `Hash.unmarshall`. A custom `unmarshall` function can be passed as argument.\n\n```JavaScript\n// data is a node-hash\nvar data = Hash.unmarshall(\n  { key1: new Date(2013, 0, 1) },\n  Hash.comparator.Date\n);\n\n// data is a node-hash\nvar data = Hash.unmarshall(\n  { key1: (new Date(2013, 0, 1)).getTime() },\n  Hash.comparator.Date,\n  function (time) {\n    return new Date(time);\n  }\n);\n\n```\n## test\n\n```bash\nnpm test\n```\n\n## Development\n\nThe dev dependencies are `coffee-script`, `mocha` and `should`. The coffeescript is compiled down to javascript automatically before publishing using the 'prepublish' script in 'package.json'. coffeescript files and test files are deliberately left out of the package via '.npmignore' because no one likes needlessly big modules.\n\nContributions are welcome!\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/fabriziomoscon/node-hash",
  "_id": "node-hash@1.1.1",
  "_from": "node-hash@"
}
